#!/usr/bin/perl -w
#===============================================================================
#
#         FILE:  sentrypeer
#
#        USAGE:  ./sentrypeer
#
#  DESCRIPTION:
#
#      OPTIONS:  ---
# REQUIREMENTS:  ---
#         BUGS:  ---
#        NOTES:  ---
#       AUTHOR:  Gavin Henry (GH), <ghenry@sentrypeer.com>
#      COMPANY:  .
#      VERSION:  1.0
#      CREATED:  19/08/21 19:32:20 BST
#     REVISION:  ---
#
#
# SPDX-License-Identifier: GPL-2.0-only OR GPL-3.0-only
# Copyright (c) 2021 Gavin Henry <ghenry@sentrypeer.com>
#===============================================================================

use strict;
use warnings;
use utf8;
use feature ':5.16';

use DBI;
use DateTime;
use Net::SIP;
use Getopt::Long;

GetOptions(
    q{debug}   => \my $debug,
    q{verbose} => \my $verbose
);

my $dbfile = qq{$0.db};

# Cleanup
$SIG{'INT'}  = \&sig_handler;
$SIG{'QUIT'} = \&sig_handler;

# Clean slate - maybe call devmode so we don't clean up valuable honey data
if ($debug) {
    unlink $dbfile          if -e $dbfile;
    say qq{Deleted $dbfile} if $debug;
}

# This creates $dbfile
my $dbh = DBI->connect(
    qq{dbi:SQLite:dbname=$dbfile},
    q{}, q{},
    {
        AutoCommit     => 1,
        RaiseError     => 1,
        sqlite_unicode => 1,
    }
);

# Schema - open for change at any stage during prototype phase
my $schema = <<'SCHEMA';
CREATE TABLE IF NOT EXISTS honey (
   event_datetime TEXT,
   honey_ipv4 TEXT,
   sip_from TEXT,
   sip_method TEXT,
   sip_uri TEXT,
   sip_via TEXT,
   sip_contact TEXT,
   sip_user_agent TEXT,
   sip_to TEXT
);
SCHEMA

$dbh->do($schema);
say qq{$dbfile created and SCHEMA populated} if $debug;

# TODO: Find our IP out automatically
my $ua = Net::SIP::Simple->new( leg => q{192.168.100.90:5060} );

# TODO: Refactor
my $save_details = sub {
    my ( $from, $call ) = @_;

    if ($debug) {
        say '======= From:';
        say $from;

        say '======= Method:';
        say $call->method();

        say '======= URI:';
        say $call->uri();

        say '======= Via:';
        say $call->get_header('via');

        say '======= Contact:';
        say $call->get_header('contact');

        say '======= User-Agent:';
        say $call->get_header('user-agent');

        say '======= To:';
        say $call->get_header('to');
    }

    # TODO: Honour TZ properly
    my $event_dt = DateTime->now()->iso8601() . q{Z};
    say qq{Event datetime is: $event_dt} if $debug;

    my $sth = $dbh->prepare(
        q{
        INSERT INTO honey 
        (event_datetime, honey_ipv4, sip_from, sip_method, sip_uri, sip_via, sip_contact, sip_user_agent, sip_to) 
        VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?);
      }
    ) or die "Cannot prepare: " . $dbh->errstr();
    say q{Prepared INSERT} if $debug;

    $sth->bind_param(
        $event_dt,                    q{ipv4_to_come},
        $from,                        $call->method(),
        $call->uri(),                 $call->get_header('via'),
        $call->get_header('contact'), $call->get_header('user-agent'),
        $call->get_header('to')

    ) or die "Cannot bind_param: " . $dbh->errstr();
    say q{Bound params} if $debug;

    $sth->execute() or die "Cannot execute: " . $dbh->errstr();
    say q{INSERTed data} if $debug;

    return 1;
};

# https://github.com/noxxi/p5-net-sip/issues/49#issuecomment-902025333
$ua->create_chain(
    [ $ua->create_registrar, $ua->listen( filter => $save_details ) ] );

if ( $verbose or $debug ) {
    say 'Listening...';
}

$ua->loop;

sub sig_handler {    # 1st argument is signal name
    my ($sig) = @_;
    say "Caught a SIG$sig. Closing $dbfile" if $debug;
    $dbh->disconnect;
    exit(0);
}

