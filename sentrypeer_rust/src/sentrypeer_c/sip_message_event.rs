/* automatically generated by rust-bindgen 0.69.4 */

pub const SENTRYPEER_SIP_MESSAGE_EVENT_H: u32 = 1;
pub type wchar_t = ::std::os::raw::c_int;
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct max_align_t {
    pub __clang_max_align_nonce1: ::std::os::raw::c_longlong,
    pub __bindgen_padding_0: u64,
    pub __clang_max_align_nonce2: u128,
}
#[test]
fn bindgen_test_layout_max_align_t() {
    const UNINIT: ::std::mem::MaybeUninit<max_align_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<max_align_t>(),
        32usize,
        concat!("Size of: ", stringify!(max_align_t))
    );
    assert_eq!(
        ::std::mem::align_of::<max_align_t>(),
        16usize,
        concat!("Alignment of ", stringify!(max_align_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__clang_max_align_nonce1) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(max_align_t),
            "::",
            stringify!(__clang_max_align_nonce1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__clang_max_align_nonce2) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(max_align_t),
            "::",
            stringify!(__clang_max_align_nonce2)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sip_message_event {
    pub packet: *mut ::std::os::raw::c_char,
    pub packet_len: usize,
    pub socket: ::std::os::raw::c_int,
    pub transport_type: *mut ::std::os::raw::c_char,
    pub client_ip_addr: *mut sockaddr,
    pub client_ip_addr_str: *mut ::std::os::raw::c_char,
    pub client_addr_len: usize,
    pub dest_ip_addr_str: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_sip_message_event() {
    const UNINIT: ::std::mem::MaybeUninit<sip_message_event> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sip_message_event>(),
        64usize,
        concat!("Size of: ", stringify!(sip_message_event))
    );
    assert_eq!(
        ::std::mem::align_of::<sip_message_event>(),
        8usize,
        concat!("Alignment of ", stringify!(sip_message_event))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).packet) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sip_message_event),
            "::",
            stringify!(packet)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).packet_len) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sip_message_event),
            "::",
            stringify!(packet_len)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).socket) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(sip_message_event),
            "::",
            stringify!(socket)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).transport_type) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(sip_message_event),
            "::",
            stringify!(transport_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).client_ip_addr) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(sip_message_event),
            "::",
            stringify!(client_ip_addr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).client_ip_addr_str) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(sip_message_event),
            "::",
            stringify!(client_ip_addr_str)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).client_addr_len) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(sip_message_event),
            "::",
            stringify!(client_addr_len)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dest_ip_addr_str) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(sip_message_event),
            "::",
            stringify!(dest_ip_addr_str)
        )
    );
}
extern "C" {
    pub fn sip_message_event_new(
        packet: *mut ::std::os::raw::c_char,
        packet_len: usize,
        socket: ::std::os::raw::c_int,
        transport_type: *mut ::std::os::raw::c_char,
        client_ip_addr: *mut sockaddr,
        client_ip_addr_str: *mut ::std::os::raw::c_char,
        client_addr_len: usize,
        dest_ip_addr_str: *mut ::std::os::raw::c_char,
    ) -> *mut sip_message_event;
}
extern "C" {
    pub fn sip_message_event_destroy(self_ptr: *mut *mut sip_message_event);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sockaddr {
    pub _address: u8,
}
